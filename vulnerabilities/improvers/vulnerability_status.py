#
# Copyright (c) nexB Inc. and others. All rights reserved.
# VulnerableCode is a trademark of nexB Inc.
# SPDX-License-Identifier: Apache-2.0
# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.
# See https://github.com/nexB/vulnerablecode for support or download.
# See https://aboutcode.org for more information about nexB OSS projects.
#

import urllib.parse
from typing import Iterable

from django.db.models import Q
from django.db.models.query import QuerySet

from vulnerabilities.importer import AdvisoryData
from vulnerabilities.importers.nvd import NVDImporter
from vulnerabilities.improver import Improver
from vulnerabilities.improver import Inference
from vulnerabilities.models import Advisory
from vulnerabilities.models import Alias
from vulnerabilities.models import Vulnerability
from vulnerabilities.models import VulnerabilityStatusType
from vulnerabilities.utils import fetch_response
from vulnerabilities.utils import get_item

NVD_API_URL = "https://cveawg.mitre.org/api/cve/"


class VulnerabilityStatusImprover(Improver):
    """
    Generate a translation of Advisory data - returned by the importers - into
    full confidence inferences. These are basic database relationships for
    unstructured data present in the Advisory model without any other
    information source.
    """

    @property
    def interesting_advisories(self) -> QuerySet:
        return Advisory.objects.filter(Q(created_by=NVDImporter.qualified_name)).paginated()

    def get_inferences(self, advisory_data: AdvisoryData) -> Iterable[Inference]:
        if not advisory_data:
            return []
        aliases = advisory_data.aliases
        aliases = Alias.objects.filter(alias__in=aliases)
        vulnerabilities = Vulnerability.objects.filter(aliases__in=aliases).distinct()

        cve_id = None

        for alias in aliases:
            if alias.startswith("CVE"):
                cve_id = alias

        if not cve_id:
            return []

        for vuln in vulnerabilities:
            status = get_status_from_api(cve_id=cve_id)
            if not status:
                status = VulnerabilityStatusType.PUBLISHED
            vuln.status = status
            vuln.save()
        return []


def get_status_from_api(cve_id):
    url = urllib.parse.urljoin(NVD_API_URL, cve_id)
    try:
        response = fetch_response(url=url)
    except Exception as e:
        return
    response = response.json()
    cve_state = get_item(response, "cveMetaData", "state")
    tags = get_item(response, "containers", "cna", "tags")
    if "disputed" in tags:
        return VulnerabilityStatusType.DISPUTED
    if cve_state == "REJECTED":
        return VulnerabilityStatusType.REJECTED
    return VulnerabilityStatusType.PUBLISHED
